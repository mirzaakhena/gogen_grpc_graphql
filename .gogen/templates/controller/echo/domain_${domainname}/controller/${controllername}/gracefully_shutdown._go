package {{LowerCase .ControllerName}}

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{.PackagePath}}/shared/infrastructure/logger"
)

// gracefullyShutdown will handle http server with gracefully shutdown mechanism
type gracefullyShutdown struct {
	httpServer *echo.Echo
	log        logger.Logger
	address    string
}

func NewGracefullyShutdown(log logger.Logger, handler *echo.Echo, address string) gogen.ControllerStarter {
	return &gracefullyShutdown{
		httpServer: handler,
		log:        log,
		address:    address,
	}
}

func (r *gracefullyShutdown) Start() {

	go func() {
		if err := r.httpServer.Start(r.address); err != nil && err != http.ErrServerClosed {
			r.httpServer.Logger.Fatal("shutting down the server")
		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt)
	<-quit
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := r.httpServer.Shutdown(ctx); err != nil {
		r.httpServer.Logger.Fatal(err)
	}

}
